name: Pages

on:
  push:
    branches:
      - main # default branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Key
        env:
          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$ACTION_DEPLOY_KEY" > ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "RolinShmily@outlook.com"
          git config --global user.name "RolinShmily"
      
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive
      
      - name: Use Node.js 23
        uses: actions/setup-node@v4
        with:
          node-version: '23'
      
      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
      
      - name: Install Dependencies
        run: |
          npm install hexo-cli -g
          npm install
      
      - name: Build
        run: |
          hexo clean
          hexo generate
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
  
  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  refresh-cdn:
    needs: deploy  
    runs-on: ubuntu-latest
    steps:
      - name: 安装依赖
        run: npm install crypto-js axios
  
      - name: 刷新CDN缓存
        env:
          ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          REFRESH_PATH: ${{ secrets.REFRESH_PATH }}
        run: |
          echo "const CryptoJS = require('crypto-js');
          const axios = require('axios');
          
          // 生成阿里云API签名
          function generateSignature(params, accessKeySecret) {
            const sortedKeys = Object.keys(params).sort();
            let canonicalizedQueryString = '';
            sortedKeys.forEach(key => {
              canonicalizedQueryString += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            });
            canonicalizedQueryString = canonicalizedQueryString.substring(1);
            
            const stringToSign = 'GET&%2F&' + encodeURIComponent(canonicalizedQueryString);
            const signature = CryptoJS.HmacSHA1(stringToSign, accessKeySecret + '&').toString(CryptoJS.enc.Base64);
            return signature;
          }
          
          async function refreshCDN() {
            const params = {
              'Action': 'RefreshObjectCaches',
              'Format': 'JSON',
              'Version': '2018-05-10',
              'AccessKeyId': process.env.ACCESS_KEY_ID,
              'SignatureMethod': 'HMAC-SHA1',
              'SignatureVersion': '1.0',
              'SignatureNonce': Date.now().toString(),
              'Timestamp': new Date().toISOString().replace(/\.\d{3}Z$/, 'Z'),
              'ObjectPath': process.env.REFRESH_PATH,
              'ObjectType': 'Directory'
            };
            
            // 生成签名
            params.Signature = generateSignature(params, process.env.ACCESS_KEY_SECRET);
            
            try {
              const response = await axios.get('https://cdn.aliyuncs.com', { params });
              console.log('CDN缓存刷新成功:', response.data);
            } catch (error) {
              console.error('CDN缓存刷新失败:', error.response ? error.response.data : error.message);
              process.exit(1);
            }
          }
          
          refreshCDN();" > refresh-cdn.js
          
          node refresh-cdn.js